[{"E:\\ws202006\\antd4\\src\\index.tsx":"1","E:\\ws202006\\antd4\\src\\reportWebVitals.ts":"2","E:\\ws202006\\antd4\\src\\App.tsx":"3","E:\\ws202006\\antd4\\src\\component\\layout\\Index.tsx":"4","E:\\ws202006\\antd4\\src\\component\\exception\\Notfoud.tsx":"5","E:\\ws202006\\antd4\\src\\routes\\config.ts":"6","E:\\ws202006\\antd4\\src\\component\\login\\Index.tsx":"7","E:\\ws202006\\antd4\\src\\component\\registry\\Index.tsx":"8","E:\\ws202006\\antd4\\src\\component\\particles\\ParticlesConfig.ts":"9"},{"size":626,"mtime":1610530308664,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":987,"mtime":1610530294321,"results":"13","hashOfConfig":"11"},{"size":1592,"mtime":1610530225456,"results":"14","hashOfConfig":"11"},{"size":453,"mtime":1610356215990,"results":"15","hashOfConfig":"11"},{"size":721,"mtime":1610530176769,"results":"16","hashOfConfig":"11"},{"size":5064,"mtime":1610529010262,"results":"17","hashOfConfig":"11"},{"size":7296,"mtime":1610523049337,"results":"18","hashOfConfig":"11"},{"size":2106,"mtime":1610508796071,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19flxcl",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"E:\\ws202006\\antd4\\src\\index.tsx",[],"E:\\ws202006\\antd4\\src\\reportWebVitals.ts",[],["40","41"],"E:\\ws202006\\antd4\\src\\App.tsx",["42","43"],"E:\\ws202006\\antd4\\src\\component\\layout\\Index.tsx",["44"],"E:\\ws202006\\antd4\\src\\component\\exception\\Notfoud.tsx",[],"E:\\ws202006\\antd4\\src\\routes\\config.ts",[],"E:\\ws202006\\antd4\\src\\component\\login\\Index.tsx",["45","46"],"E:\\ws202006\\antd4\\src\\component\\registry\\Index.tsx",["47"],"import {Component} from \"react\";\r\nimport {Card, Input, Select, Tooltip, AutoComplete, Form, Checkbox, Button} from \"antd\";\r\nimport {QuestionCircleOutlined} from \"@ant-design/icons\"\r\nimport {IRegistryState} from \"../../interface\";\r\nimport \"../lessbase/LOR.less\";\r\nimport Particles from \"react-particles-js\";\r\nimport {particlesConfig} from \"../particles/ParticlesConfig\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport class Registry extends Component<any, any>{\r\n\r\n  constructor(props: any, state: IRegistryState) {\r\n    super(props, state);\r\n    this.state = {\r\n      prefixSelector: <Form.Item name=\"prefix\" noStyle>\r\n        <Select style={{ width: 70 }}>\r\n          <Select.Option value=\"86\">+86</Select.Option>\r\n          <Select.Option value=\"87\">+87</Select.Option>\r\n        </Select>\r\n      </Form.Item>,\r\n      websiteReg: [ '.io','.org','.com', '.cn', '.net' ,'.top' ,'.中文网'],\r\n      websiteOptions: [],\r\n      emailReg: ['gmail.com', '163.com', 'qq.com',  '126 .com', 'foxmail.com'],\r\n      emailOptions: [],\r\n      params: particlesConfig,\r\n      formItemLayout: {\r\n        labelCol: {\r\n          xs: { span: 24 },\r\n          sm: { span: 6 },\r\n        },\r\n        wrapperCol: {\r\n          xs: { span: 24 },\r\n          sm: { span: 18 },\r\n        },\r\n      },\r\n      tailFormItemLayout: {\r\n        wrapperCol: {\r\n          xs: {\r\n            span: 24,\r\n            offset: 0,\r\n          },\r\n          sm: {\r\n            span: 23,\r\n            offset: 1,\r\n          },\r\n        },\r\n      }\r\n    }\r\n  }\r\n\r\n  /* email 联想 */\r\n  handleEmailSearch = (value: string) => {\r\n    let res: string[] = [];\r\n    const {emailReg} = this.state;\r\n    if (!value) {\r\n      res = [];\r\n    } else {\r\n      res = emailReg.map((domain: string) => ({\r\n        label: `${value}@${domain}`,\r\n        value: `${value}@${domain}`,\r\n      }));\r\n    }\r\n    this.setState({\r\n      emailOptions:res\r\n    });\r\n  };\r\n\r\n  /* 站点联想 */\r\n  handleWebsiteSearch = (value: string) => {\r\n    let res: string[] = [];\r\n    if (!value) {\r\n      res = [];\r\n    } else {\r\n      const {websiteReg} = this.state;\r\n      res = websiteReg.map((domain: string) => ({\r\n        label: `${value}${domain}`,\r\n        value: `${value}${domain}`,\r\n      }));\r\n    }\r\n    this.setState({\r\n      websiteOptions: res\r\n    })\r\n  };\r\n\r\n  /* 表单验证完提交 */\r\n  onFinish = (values: any) => {\r\n    console.log('Received values of form: ', values);\r\n  };\r\n\r\n  render() {\r\n    const {prefixSelector, emailOptions,websiteOptions, params,formItemLayout,tailFormItemLayout} = this.state;\r\n    return (\r\n      <div className=\"card-par-div\">\r\n        <Particles\r\n          params={params}\r\n          className=\"particles-style\"\r\n        />\r\n        <Card title=\"注册\" className=\"card-registry\">\r\n          <Form\r\n            name=\"register\"\r\n            onFinish={this.onFinish}\r\n            initialValues={{\r\n              prefix: \"+86\"\r\n            }}\r\n            {...formItemLayout}\r\n            scrollToFirstError\r\n          >\r\n            <Form.Item\r\n              name=\"nickname\"\r\n              label={\r\n                <span>\r\n                  昵称&nbsp;\r\n                    <Tooltip title=\"What do you want others to call you?\">\r\n                    <QuestionCircleOutlined />\r\n                  </Tooltip>\r\n                </span>\r\n              }\r\n              rules={[{ required: true, message: '请输入昵称!', whitespace: true }]}\r\n            >\r\n              <Input allowClear={true} placeholder=\"请输入昵称!\"/>\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"password\"\r\n              label=\"密码\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: '请输入密码!',\r\n                },\r\n              ]}\r\n              hasFeedback\r\n            >\r\n              <Input.Password  allowClear={true} placeholder=\"请输入密码!\"/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              name=\"confirm\"\r\n              label=\"确认密码\"\r\n              dependencies={['password']}\r\n              hasFeedback\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: '请再次输入密码!',\r\n                },\r\n                ({ getFieldValue }) => ({\r\n                  validator(_, value) {\r\n                    if (!value || getFieldValue('password') === value) {\r\n                      return Promise.resolve();\r\n                    }\r\n                    return Promise.reject('两次密码不匹配，请重新输入!');\r\n                  },\r\n                }),\r\n              ]}\r\n            >\r\n              <Input.Password  allowClear={true} placeholder=\"请再次输入密码!\"/>\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"email\"\r\n              label={\r\n                <span>\r\n                  E-mail&nbsp;\r\n                  <Tooltip title=\"请输入正确邮箱地址，如 xxx@163.com...\">\r\n                    <QuestionCircleOutlined />\r\n                  </Tooltip>\r\n                </span>\r\n              }\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  type: 'email',\r\n                  message: '请输入正确的邮箱地址!',\r\n                },\r\n              ]}\r\n            >\r\n              <AutoComplete options={emailOptions} onChange={this.handleEmailSearch} allowClear={true}>\r\n                <Input  placeholder=\"请输入邮箱!\"/>\r\n              </AutoComplete>\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"phone\"\r\n              label=\"手机号码\"\r\n              rules={[{ required: true, message: '请输入你的手机号码!' }]}\r\n            >\r\n              <Input  maxLength={11} addonBefore={prefixSelector} style={{ width: '100%' }}  allowClear={true}  placeholder=\"请输入你的手机号码!\"/>\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"website\"\r\n              label=\"个人站点\"\r\n              rules={[{ required: true, message: '请输入站点!' }]}\r\n            >\r\n              <AutoComplete  options={websiteOptions}  onChange={this.handleWebsiteSearch}  allowClear={true}>\r\n                <Input placeholder=\"请输入站点!\"/>\r\n              </AutoComplete>\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"agreement\"\r\n              valuePropName=\"checked\"\r\n              rules={[\r\n                {\r\n                  validator: (_, value) =>\r\n                    value ? Promise.resolve() : Promise.reject('必须同意用户协议才可继续！'),\r\n                },\r\n              ]}\r\n              {...tailFormItemLayout}\r\n              style={{textAlign: \"left\"}}\r\n            >\r\n              <div>\r\n                <Checkbox>\r\n                  我同意<a href=\"#\">相关协议</a>\r\n                </Checkbox>\r\n                <Link style={{float: \"right\"}} to=\"/admin/login\">立即登录</Link>\r\n              </div>\r\n            </Form.Item>\r\n            <Form.Item {...tailFormItemLayout}>\r\n              <Button type=\"primary\" htmlType=\"submit\" block>\r\n                注册\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Registry;","E:\\ws202006\\antd4\\src\\component\\particles\\ParticlesConfig.ts",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":6,"column":7,"nodeType":"54","messageId":"55","endLine":6,"endColumn":14},{"ruleId":"56","severity":1,"message":"57","line":9,"column":5,"nodeType":"58","messageId":"59","endLine":11,"endColumn":6},{"ruleId":"52","severity":1,"message":"60","line":17,"column":14,"nodeType":"54","messageId":"55","endLine":17,"endColumn":18},{"ruleId":"61","severity":1,"message":"62","line":54,"column":44,"nodeType":"63","messageId":"64","endLine":54,"endColumn":46},{"ruleId":"65","severity":1,"message":"66","line":117,"column":23,"nodeType":"67","endLine":117,"endColumn":65},{"ruleId":"65","severity":1,"message":"66","line":210,"column":22,"nodeType":"67","endLine":210,"endColumn":34},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"@typescript-eslint/no-unused-vars","'history' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'test' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]